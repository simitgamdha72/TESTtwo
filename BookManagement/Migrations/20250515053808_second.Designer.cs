// <auto-generated />
using System;
using BookManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookManagement.Migrations
{
    [DbContext(typeof(BookManagementContext))]
    [Migration("20250515053808_second")]
    partial class second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookManagement.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying")
                        .HasColumnName("Author");

                    b.Property<int>("ISBN")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublieshedYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying")
                        .HasColumnName("Title");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("Books_pkey");

                    b.HasIndex(new[] { "ISBN" }, "unique_ISBN")
                        .IsUnique();

                    b.HasIndex(new[] { "Title" }, "unique_email")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookManagement.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.HasIndex(new[] { "Email" }, "unique_email")
                        .IsUnique()
                        .HasDatabaseName("unique_email1");

                    b.HasIndex(new[] { "UserName" }, "unique_username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookManagement.Models.UserIssuedBooks", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("isReturn")
                        .HasColumnType("boolean")
                        .HasColumnName("isReturn");

                    b.HasKey("Id")
                        .HasName("UserIssuedBooks_pkey");

                    b.ToTable("UserIssuedBooks");
                });

            modelBuilder.Entity("BookManagement.Models.UserIssuedBooks", b =>
                {
                    b.HasOne("BookManagement.Models.Books", "Books")
                        .WithMany("userIssuedBooks")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserIssuedBooks_bookid_by_fkey");

                    b.HasOne("BookManagement.Models.User", "User")
                        .WithMany("userIssuedBooks")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserIssuedBooks_userid_by_fkey");

                    b.Navigation("Books");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookManagement.Models.Books", b =>
                {
                    b.Navigation("userIssuedBooks");
                });

            modelBuilder.Entity("BookManagement.Models.User", b =>
                {
                    b.Navigation("userIssuedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
